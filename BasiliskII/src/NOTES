commands run in Unix dir

```
cd src/Unix
```

# make for native

```
macemujs_conf_native=1  ./_embuild.sh 
make clean
make
./BasiliskII
```

## make for browser

there are two versions:
- 'mainthread': doesn't use worker or SAB (set environment variable `macemujs_conf_mainthread=1`) 
- 'worker': uses worker with SAB 


first, make sure you've already built for native once (including the var macemujs_conf_cpu=1), as this produces generated CPU source files

```
# (once, otherwise configure will say c compiler is broken)
source ~/code/tools/emsdk/emsdk_env.sh
 
# building for SharedArrayBuffer worker mode
macemujs_conf_cpu=1 ./_embuild.sh 
# or for main thread mode
macemujs_conf_mainthread=1 macemujs_conf_cpu=1 ./_embuild.sh 


make mostlyclean # using 'clean' will clobber the the generated CPU files
make
./_emafterbuild.sh 
```


# wasm
``` 
# set use_wasm in _emenv.sh and build, then
node js/webserver.js . # supports serving wasm with correct content type
open http://127.0.0.1:8080/BasiliskII-worker.html 
```


## how the build system was modified for emscripten

changes have been made to the input files to autoconf (BasiliskII/src/Unix/configure.ac and BasiliskII/src/Unix/Makefile.in)
certain options which might be automatically enabled based on detected functionality in the host environment, which doesn't exist in the target (web), have been hard coded (eg. disabling ethernet, assembly optimizations etc)

as the basilisk build system compiles a c++ binary which then generates more code, we first need to build for native to generate this code, then build again for web, deleting compiled object files but not the generated CPU code. the mostlyclean make rule deletes only the correct files.




## make for browser with pthreads (old, broken)

```
# (once, otherwise configure will say c compiler is broken)
source ~/code/tools/emsdk_portable/emsdk_env.sh

macemujs_conf_pthreads=1 ./_embuild.sh 
make clean
make
macemujs_conf_pthreads=1 ./_emafterbuild.sh 
``
